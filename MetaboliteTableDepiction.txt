
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Metabolite Visualization</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap">

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: white;
        }

        h1, h2 {
            font-weight: 700;
        }

        table {
            font-size: 16px;
            width: 75%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: center;
        }
    </style>
</head>
<body>

    <h1>NAD biosynthesis I from aspartate (WP2484)</h1>

    <section>
        <h2>Metabolite Table</h2>

        <table border="1" style="margin: auto;" id="metaboliteTable">
            <tr>
                <th>Metabolite</th>
                <th>SMILES Configuration</th>
                <th>Molecule Image</th>
            </tr>
        </table>
    </section>

    <script>
        async function executeSPARQLQuery() {
            const sparqlEndpoint = 'https://sparql.wikipathways.org/sparql';
            const sparqlQuery = `
                PREFIX cheminf: <http://semanticscience.org/resource/>

                SELECT ?pathway (SAMPLE(str(?label)) as ?MetaboliteLabel) (SAMPLE(?smilesDepict) as ?smilesDepict) ?Metabolite
                WHERE {
                    ?Metabolite a wp:Metabolite ;
                        rdfs:label ?label ;
                        dcterms:isPartOf ?pathway .
                    ?pathway a wp:Pathway ;
                        dcterms:identifier "WP2484" .
                    ?Metabolite wp:bdbWikidata/cheminf:CHEMINF_000018 ?smilesDepict .
                }
                GROUP BY ?pathway ?Metabolite
            `;

            const response = await fetch(sparqlEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Accept': '*/*',
                },
                body: new URLSearchParams({
                    query: sparqlQuery,
                    format: 'json',
                }),
            });

            try {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                return data.results.bindings;
            } catch (error) {
                console.error('Error fetching SPARQL data:', error);
                return [];
            }
        }

async function updateTable() {
            const metaboliteTable = document.getElementById('metaboliteTable');
            const results = await executeSPARQLQuery();

            try {
                if (!Array.isArray(results)) {
                    console.error('SPARQL query did not return an array:', results);
                    return;
                }

                // Function to delay execution
                const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

                // Insert header row if table is empty
                if (metaboliteTable.rows.length === 0) {
                    const headerRow = metaboliteTable.insertRow();
                    
                    headerRow.insertCell(0).textContent = 'Metabolite Label';
                    headerRow.insertCell(1).textContent = 'Molecule Image';
                    headerRow.insertCell(2).textContent = 'SMILES Configuration';
                }

                for (const result of results) {
                   
                    const metaboliteLabel = result.MetaboliteLabel.value;
                    const smilesDepict = result.smilesDepict.value;
                    const metabolite = result.Metabolite.value;

                    const row = metaboliteTable.insertRow();
                    
                    row.insertCell(0).textContent = metaboliteLabel;
                    const imageCell = row.insertCell(1);
                    const image = document.createElement('img');
                    row.insertCell(2).textContent = smilesDepict;

                    // Add delay of 500 milliseconds between requests
                    await delay(500);

                    // Set image properties
                    image.src = `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/${encodeURIComponent(smilesDepict)}/PNG`;
                    image.alt = `Structure for ${metaboliteLabel}`;

                    // Append image to cell
                    imageCell.appendChild(image);
                }
            } catch (error) {
                console.error('Error updating table:', error);
            }
        }

        window.onload = updateTable;
    </script>

</body>
</html>
